{"version":3,"file":"main.umd.js","sources":["../node_modules/@bjnstnkvc/local-storage/src/main.ts","../node_modules/@bjnstnkvc/session-storage/src/main.ts","../src/main.ts"],"sourcesContent":["export type LocalStorageItem = {\n    data: any,\n    expiry: number | null\n};\n\nexport class LocalStorage {\n    /**\n     * Default item validity period in seconds.\n     *\n     * @type { number | null }\n     */\n    static #ttl: number | null = null;\n\n    /**\n     * Set the default item validity period in seconds.\n     *\n     * @param { number | null } value\n     */\n    static ttl(value: number | null) {\n        this.#ttl = value;\n    }\n\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value Value you want to give the key you are creating.\n     * @param { number | null } ttl Item validity period in seconds.\n     */\n    static set(key: string, value: any, ttl: number | null = null): void {\n        ttl = ttl ?? this.#ttl;\n\n        const item: LocalStorageItem = {\n            data  : value instanceof Function ? value() : value,\n            expiry: ttl ? Date.now() + ttl * 1000 : null\n        };\n\n        localStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = localStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: LocalStorageItem = JSON.parse(storageItem);\n\n            if (item.expiry && Date.now() > item.expiry) {\n                this.remove(key);\n\n                return null;\n            }\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     * @param { number | null } ttl Item validity period in seconds.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function, ttl: number | null = null): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback, ttl ?? this.#ttl);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(localStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(localStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return localStorage.length;\n    }\n\n    /**\n     * Updates the item expiration time.\n     *\n     * @param { string } key String containing the name of the key you want to update.\n     * @param { number | null } ttl Item validity period in seconds.\n     */\n    static touch(key: string, ttl: number | null = null): void {\n        const item = this.get(key);\n\n        if (item === null) {\n            return;\n        }\n\n        this.set(key, item, ttl ?? this.#ttl);\n    }\n\n    /**\n     * Returns the expiration date for a given key.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     * @param { boolean } asDate If true, returns the expiration date as a Date object.\n     *\n     * @return { number | Date | null }\n     */\n    static expiry(key: string, asDate: boolean = false): number | Date | null {\n        const storageItem: string | null = localStorage.getItem(key);\n\n        if (storageItem === null) {\n            return null;\n        }\n\n        try {\n            const item: LocalStorageItem | null = JSON.parse(storageItem);\n\n            if (!item?.hasOwnProperty('expiry') || item?.expiry === null) {\n                return null;\n            }\n\n            return asDate ? new Date(item.expiry) : item.expiry;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).LocalStorage = LocalStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).LocalStorage = LocalStorage;\n}","export type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value String containing the value of the key you want to create.\n     */\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data: value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(sessionStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}","import { LocalStorage } from '@bjnstnkvc/local-storage';\r\nimport { SessionStorage } from '@bjnstnkvc/session-storage';\r\n\r\nexport { LocalStorage, SessionStorage };\r\n\r\nexport class Stash {\r\n    /**\r\n     * Creates a new instance of the Stash for the given driver.\r\n     *\r\n     * @param { 'local' | 'session' } driver\r\n     *\r\n     * @returns { typeof LocalStorage | typeof SessionStorage }\r\n     *\r\n     * @throws { Error }\r\n     */\r\n    static driver(driver: 'local' | 'session'): typeof LocalStorage | typeof SessionStorage {\r\n        switch (driver) {\r\n            case 'local':\r\n                return LocalStorage;\r\n\r\n            case 'session':\r\n                return SessionStorage;\r\n\r\n            default:\r\n                throw new Error('Unsupported driver.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the Local Storage.\r\n     *\r\n     * @returns { typeof LocalStorage }\r\n     */\r\n    static local(): typeof LocalStorage {\r\n        return LocalStorage;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the Session Storage.\r\n     *\r\n     * @returns { typeof SessionStorage }\r\n     */\r\n    static session(): typeof SessionStorage {\r\n        return SessionStorage;\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    (window as any).Stash = Stash;\r\n    (window as any).LocalStorage = LocalStorage;\r\n    (window as any).SessionStorage = SessionStorage;\r\n}\r\n\r\nif (typeof global !== 'undefined') {\r\n    (global as any).Stash = Stash;\r\n    (global as any).LocalStorage = LocalStorage;\r\n    (global as any).SessionStorage = SessionStorage;\r\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}