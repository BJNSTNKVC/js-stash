{"version":3,"file":"main.min.js","sources":["../node_modules/@bjnstnkvc/local-storage/src/main.ts","../node_modules/@bjnstnkvc/session-storage/src/main.ts","../src/main.ts"],"sourcesContent":["export type LocalStorageItem = {\n    data: any,\n    expiry: number | null\n};\n\nexport class LocalStorage {\n    /**\n     * Default item validity period in seconds.\n     *\n     * @type { number | null }\n     */\n    static #ttl: number | null = null;\n\n    /**\n     * Set the default item validity period in seconds.\n     *\n     * @param { number | null } value\n     */\n    static ttl(value: number | null) {\n        this.#ttl = value;\n    }\n\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value Value you want to give the key you are creating.\n     * @param { number | null } ttl Item validity period in seconds.\n     */\n    static set(key: string, value: any, ttl: number | null = null): void {\n        ttl = ttl ?? this.#ttl;\n\n        const item: LocalStorageItem = {\n            data  : value instanceof Function ? value() : value,\n            expiry: ttl ? Date.now() + ttl * 1000 : null\n        };\n\n        localStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = localStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: LocalStorageItem = JSON.parse(storageItem);\n\n            if (item.expiry && Date.now() > item.expiry) {\n                this.remove(key);\n\n                return null;\n            }\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     * @param { number | null } ttl Item validity period in seconds.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function, ttl: number | null = null): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback, ttl ?? this.#ttl);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(localStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        localStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(localStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return localStorage.length;\n    }\n\n    /**\n     * Updates the item expiration time.\n     *\n     * @param { string } key String containing the name of the key you want to update.\n     * @param { number | null } ttl Item validity period in seconds.\n     */\n    static touch(key: string, ttl: number | null = null): void {\n        const item = this.get(key);\n\n        if (item === null) {\n            return;\n        }\n\n        this.set(key, item, ttl ?? this.#ttl);\n    }\n\n    /**\n     * Returns the expiration date for a given key.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     * @param { boolean } asDate If true, returns the expiration date as a Date object.\n     *\n     * @return { number | Date | null }\n     */\n    static expiry(key: string, asDate: boolean = false): number | Date | null {\n        const storageItem: string | null = localStorage.getItem(key);\n\n        if (storageItem === null) {\n            return null;\n        }\n\n        try {\n            const item: LocalStorageItem | null = JSON.parse(storageItem);\n\n            if (!item?.hasOwnProperty('expiry') || item?.expiry === null) {\n                return null;\n            }\n\n            return asDate ? new Date(item.expiry) : item.expiry;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).LocalStorage = LocalStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).LocalStorage = LocalStorage;\n}","export type SessionStorageItem = {\n    data: any,\n};\n\nexport class SessionStorage {\n    /**\n     * Set the key to the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { * } value String containing the value of the key you want to create.\n     */\n    static set(key: string, value: any): void {\n        const item: SessionStorageItem = {\n            data: value instanceof Function ? value() : value,\n        };\n\n        sessionStorage.setItem(key, JSON.stringify(item));\n    }\n\n    /**\n     * Get the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { string | Function | null } fallback String containing the fallback value.\n     *\n     * @return { * }\n     */\n    static get(key: string, fallback: string | Function | null = null): any {\n        const storageItem: string | null = sessionStorage.getItem(key);\n\n        if (storageItem === null) {\n            return fallback instanceof Function ? fallback() : fallback ?? null;\n        }\n\n        try {\n            const item: SessionStorageItem = JSON.parse(storageItem);\n\n            return item.data ?? item;\n        } catch {\n            return storageItem;\n        }\n    }\n\n    /**\n     * Get the key from the Storage, or execute the given callback and store the result.\n     *\n     * @param { string } key String containing the name of the key you want to create.\n     * @param { Function } callback Function you want to execute.\n     *\n     * @return { any }\n     */\n    static remember(key: string, callback: Function): any {\n        const item: string | null = this.get(key);\n\n        if (item === null) {\n            this.set(key, callback);\n        }\n\n        return item ?? this.get(key);\n    }\n\n    /**\n     * Retrieves all items from the Storage object.\n     *\n     * @return { object }\n     */\n    static all(): Record<string, any> {\n        return Object.fromEntries(Object.keys(sessionStorage).map((key: string): [string, any] => [key, this.get(key)]));\n    }\n\n    /**\n     * Remove the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to delete.\n     */\n    static remove(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    /**\n     * Clear all keys stored in a given Storage object.\n     */\n    static clear(): void {\n        sessionStorage.clear();\n    }\n\n    /**\n     * Determine if the key exists in the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static has(key: string): boolean {\n        return !!this.get(key);\n    }\n\n    /**\n     * Determine if any of the keys exists in the Storage object.\n     *\n     * @param { string | array } keys String containing the name of the key you want to check against\n     *\n     * @return { boolean }\n     */\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\n        if (keys.length === 1) {\n            if (Array.isArray(keys[0])) {\n                keys = keys[0];\n            } else {\n                keys = [keys[0]];\n            }\n        }\n\n        return keys.some((key: string): boolean => this.has(key));\n    }\n\n    /**\n     * Determine if the Storage object is empty.\n     *\n     * @return { boolean }\n     */\n    static isEmpty(): boolean {\n        return Object.keys(this.all()).length === 0;\n    }\n\n    /**\n     * Determine if the Storage object is not empty.\n     *\n     * @return { boolean }\n     */\n    static isNotEmpty(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Retrieves all keys from the Storage object.\n     *\n     * @return { array }\n     */\n    static keys(): string[] {\n        return Object.keys(sessionStorage);\n    }\n\n    /**\n     * Returns the total number of items in the Storage object.\n     *\n     * @return { number }\n     */\n    static count(): number {\n        return sessionStorage.length;\n    }\n\n    /**\n     * Dump the key from the Storage object.\n     *\n     * @param { string } key String containing the name of the key you want to dump.\n     */\n    static dump(key: string): void {\n        console.log(this.get(key));\n    }\n}\n\nif (typeof window !== 'undefined') {\n    (window as any).SessionStorage = SessionStorage;\n}\n\nif (typeof global !== 'undefined') {\n    (global as any).SessionStorage = SessionStorage;\n}","import { LocalStorage } from '@bjnstnkvc/local-storage';\r\nimport { SessionStorage } from '@bjnstnkvc/session-storage';\r\n\r\nexport { LocalStorage, SessionStorage };\r\n\r\nexport class Stash {\r\n    /**\r\n     * Creates a new instance of the Stash for the given driver.\r\n     *\r\n     * @param { 'local' | 'session' } driver\r\n     *\r\n     * @returns { typeof LocalStorage | typeof SessionStorage }\r\n     *\r\n     * @throws { Error }\r\n     */\r\n    static driver(driver: 'local' | 'session'): typeof LocalStorage | typeof SessionStorage {\r\n        switch (driver) {\r\n            case 'local':\r\n                return LocalStorage;\r\n\r\n            case 'session':\r\n                return SessionStorage;\r\n\r\n            default:\r\n                throw new Error('Unsupported driver.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the Local Storage.\r\n     *\r\n     * @returns { typeof LocalStorage }\r\n     */\r\n    static local(): typeof LocalStorage {\r\n        return LocalStorage;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the Session Storage.\r\n     *\r\n     * @returns { typeof SessionStorage }\r\n     */\r\n    static session(): typeof SessionStorage {\r\n        return SessionStorage;\r\n    }\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    (window as any).Stash = Stash;\r\n    (window as any).LocalStorage = LocalStorage;\r\n    (window as any).SessionStorage = SessionStorage;\r\n}\r\n\r\nif (typeof global !== 'undefined') {\r\n    (global as any).Stash = Stash;\r\n    (global as any).LocalStorage = LocalStorage;\r\n    (global as any).SessionStorage = SessionStorage;\r\n}"],"names":["LocalStorage","ttl","value","__classPrivateFieldSet","this","_a","_LocalStorage_ttl","set","key","__classPrivateFieldGet","item","data","Function","expiry","Date","now","localStorage","setItem","JSON","stringify","get","fallback","storageItem","getItem","parse","remove","_b","_c","remember","callback","all","Object","fromEntries","keys","map","removeItem","clear","has","hasAny","length","Array","isArray","some","isEmpty","isNotEmpty","count","touch","asDate","hasOwnProperty","dump","console","log","window","global","SessionStorage","sessionStorage","Stash","driver","Error","local","session"],"mappings":"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","x_google_ignoreList":[0,1]}